<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Linux Namespace on Dashjay&#39;s</title>
        <link>/tags/linux-namespace/</link>
        <description>Recent content in Linux Namespace on Dashjay&#39;s</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 13 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/linux-namespace/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Docker 玩的障眼法</title>
        <link>/post/2021/01/13/how-docker-plays/</link>
        <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>/post/2021/01/13/how-docker-plays/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;刚刚入手docker会感觉有点像虚拟机，但是又有许多不同，一查资料都在说虚拟机虚拟了磁盘/CPU&amp;hellip;，docker轻量但是基本没说究竟怎么回事。
今天学习了 Docker 的一些实现细节之后，发现这些只不过都是 Docker 或者说 Linux 玩的障眼法，让我们来看一眼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;容器是什么&#34;&gt;容器是什么？&lt;/h2&gt;
&lt;p&gt;容器其实就是在操作系统启动进程的时候，通过附加 &lt;strong&gt;一些参数&lt;/strong&gt;，利用操作系统提供的接口来 &lt;strong&gt;隔离不相关资源&lt;/strong&gt;，最后得到一个特殊的进程。&lt;/p&gt;
&lt;h2 id=&#34;pid-障眼法&#34;&gt;Pid 障眼法&lt;/h2&gt;
&lt;p&gt;我们知道在 &lt;code&gt;Linux&lt;/code&gt; 中，启动进程需要使用函数（系统调用），例如：&lt;code&gt;fork&lt;/code&gt;, &lt;code&gt;vfork&lt;/code&gt;, &lt;code&gt;clone&lt;/code&gt; 等。下面给出一个 &lt;code&gt;clone&lt;/code&gt; 的函数签名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; pid = clone(main_function, stack_size, SIGCHLD, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;NULL&lt;/span&gt;); 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用这个函数，系统就会为我们创建一个新的进程，并且返回它的进程号 pid 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#727272&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; pid = clone(main_function, stack_size, CLONE_NEWPID | SIGCHLD, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;NULL&lt;/span&gt;); 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果我们在调用的时候，在参数中指定 &lt;code&gt;CLONE_NEWPID&lt;/code&gt; 参数，在该进程内，就会看到一个全新的进程空间。&lt;/p&gt;
&lt;p&gt;也就数说，这个进程会以为自己就是 1 号进程，但是其实这只是一个障眼法，在宿主机的进程空间里，进程的 PID 还是真实的数值。&lt;/p&gt;
&lt;p&gt;这是 Linux 中的一个叫 Namespace的机制&lt;/p&gt;
&lt;h2 id=&#34;障眼法的更优解释命名空间&#34;&gt;障眼法的更优解释（命名空间）&lt;/h2&gt;
&lt;p&gt;所以当你理解了进程 Namespace 的时候，你就会明白，其实并没有容器。Docker 帮你启动你的进程的同时，使用了操作系统提供的命名空间限制，让你的进程以为自己在一个独立的空间中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mount Namespace 让你的进程以为自己有根目录，其实那只不过是挂载了一个目录目录到进程的根目录。&lt;/li&gt;
&lt;li&gt;Network Namespace 让你的进程隔离于其他网路设备，只能看到你为它连接的网络设备。&lt;/li&gt;
&lt;li&gt;User Namespace 将本地的虚拟 user-id 映射到真实的 user-id 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包括就连主机名等等其他资源，也可以用障眼法隔离起来，只要理解了，就不会觉得 Docker 很神奇了。&lt;/p&gt;
&lt;h2 id=&#34;弊端&#34;&gt;弊端&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;隔离不彻底，ubuntu14.04 有 docker 逃逸的 CVE&amp;hellip;&lt;/li&gt;
&lt;li&gt;docker 可能会占用非常多的资源，在后面要引入 Linux Cgroup 来限制容器使用资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.lucode.net/linux/intro-Linux-namespace-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux Namespace 简介 UTS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://time.geekbang.org/column/article/14642&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;极客时间-深入剖析Kubernetes-05-从进程说开&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
