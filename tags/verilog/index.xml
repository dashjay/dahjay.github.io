<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>verilog on Dashjay&#39;s</title>
    <link>/tags/verilog/</link>
    <description>Recent content in verilog on Dashjay&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/verilog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用modelsim_ase &#43; flask实现了一个测评沙箱</title>
      <link>/post/2019/09/02/modelsim-ase-flask/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/09/02/modelsim-ase-flask/</guid>
      <description>二话不说先甩上Github连接 Verilog-Judge-USTB Verilog-Judge-USTB ¶ 来自北京科技大学某小组的一个verilog的评测沙箱，基于Flask编写
A verilog online judger from USTB, based on Flask-python
Usage ¶ 构建(build)
1 2 3 git clone https://github.com/dashjay/Verilog-Judge-USTB.git cd Verilog-Judge-USTB docker build . -t verilog-judge 运行(run)
1 docker run verilog-judge -v ./modelsim_ase:/root/modelsim_ase -p 33778:5000 内部指定的modelsim_ase来自FPGA微软的免费软件 Quartus Lite 中的modelsim组件 docker内部运行的端口是5000，开在外部
测试(test)
1 2 chmod +x test.sh python test.py | python -m json.tool 以下是测试输出
1 2 3 4 5 6 { &amp;#34;cmpcode&amp;#34;: 1, &amp;#34;cmpresult&amp;#34;: &amp;#34;Start time: 07:46:33 on Sep 02,2019\nvlog top_module.</description>
    </item>
    
    <item>
      <title>使用 Modelsim 中的 CommandTools 进行仿真</title>
      <link>/post/2019/07/27/modelsim-commandtools/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/27/modelsim-commandtools/</guid>
      <description>本文最后修改于 2020-12-31
本人在本科期间有学一门课程叫做数字逻辑，这是一门从与或门开始，一直到加法器等普通电子器件，最终实现一个 CPU 的课程。课程内使用的是一个叫 Vivado 的电路设计，仿真综合软件。我私下一直使用的是iverilog进行的仿真，生成vvp可执行文件之后运行得到结果，因为方便。
我一般会写这样的Makefile
1 2 3 4 5 6 7 8 9 10 11 12 all: cmp vvp lxt cmp: iverilog *.v -o tb_top.vvp vvp: vvp tb_top.vvp lxt: cat top.lxt clean: @rm -rf tb_top.vvp tb_top.lxt 有了以上 Makefile ，将 *.v文件和 Makefile 放在一起，执行 make 命令即可完成相应操作
但是用这种方式，生成的波形只能使用GTKwave来查看，并且当有一些复杂的情况出现时候，iverilog就无法处理了，所以我们使用Intel提供的免费的Modelsim来完成仿真，仿真资料比较少，全是图形化界面的介绍，道路坎坷。
0x0：下载全套工具 ¶ 我在 intel 官网下载了 lite 版本，最小套装，大同小异，包大小 100 多 M，这里就不留源文件了。 我下载的是：Quartus-lite-18.1.0.625-linux.tar
0x1：安装 ¶ 解压之后有一键安装脚本，运行的时候会提示缺库，安装对应的库文件就可以使用了。
0x2：仿真出波形 ¶ 0x21. vlog工具 ¶ 路径位于 intelFPGA_lite/18.1/modelsim_ase/bin/vlog 执行 *vlog .</description>
    </item>
    
  </channel>
</rss>
