<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dashjay&#39;s</title>
    <link>/</link>
    <description>Recent content on Dashjay&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>汉明码对数据的纠错&amp;ECC内存</title>
      <link>/post/2022/07/10/hanming-code-ecc/</link>
      <pubDate>Sun, 10 Jul 2022 11:27:44 +0800</pubDate>
      
      <guid>/post/2022/07/10/hanming-code-ecc/</guid>
      <description>0x00 在过去一年的工作里，大多数时间都在做的内容是私有化交付，大概就是 Bazel 打包某些应用到 Linux 下部署，开发的任务相对其他同学来说比较少，也很久没有接触到算法了。
最近被分配到另一个组里（data组）也就是数据持久化的一个组，然后我在悄悄学习一些数据相关的技术。
今天本来是想上网去找EC算法（ErasureCode）的资料，结果突然看到了 ECC 内存使用的汉明码，然后突然想起来，以前学校里学过这个东西，但是只停留在怎么用这个层级，不知道原理是什么。
今天我们来回顾一下学生知识：
0x01 假设我们有一组数据要传输或者储存，为了计算方便我们将数据的长度设置为11位，也就是说11个数据位
假设数据就是 0010 0011 010 然后我们会在这些数据里去插入一些校验位，分别在 $2^0, 2^1, 2^2, 2^3$ 加入四个校验位。
为了方便，我把数据放进表格里，然后打上标志
A0 A1 A2 0 A3 0 1 0 A8 0 0 1 1 0 1 0 我先说不说 A 相关的比特位的产生规则，我先直接填充上。
0 1 1 0 1 0 1 0 1 0 0 1 1 0 1 0 并且把所有表格按照二进制顺序排序，0000,0001，0010,0011……1111,
然后把所有1位置对应的二进制描述全部按顺序列出来
1 2 3 4 5 6 7 8 0001 0010 0100 0110 1000 1011 1100 1110 上面这些数位按位异或，就会得到0000,校验就会成功。</description>
    </item>
    
    <item>
      <title>毕业论文的感受</title>
      <link>/post/2021/06/14/experience-about-graduation-thesis/</link>
      <pubDate>Mon, 14 Jun 2021 11:27:44 +0800</pubDate>
      
      <guid>/post/2021/06/14/experience-about-graduation-thesis/</guid>
      <description>我的毕业论文由何杰老师指导，在这次论文编写过程中，我对非代码类工作产生了新的看法。
记录一下我是如何体会到的。
我的题目是公司的领导帮我定的，公司的需求是写一个 Operator ，想把这个写成论文其实很难：
框架打好了 controller-manager ，自己写的部分非常有限制。 Opeartor 在项目中用来部署一个复杂系统，但是论文又只能限制在 Operator 范围内，写不了太多有关系统的东西，底层的容器、网络甚至选举都本来不应该拿出来写。 工程化的项目，比较难写出学术论文的感受。 所以我开始写论文的时候，是非常被动，以凑字数为目标。
摘要里写了一大堆没用的背景介绍，自己做的内容非常少而且不精准的随便说了说，因为我觉得这个东西应该不会有人看，应该只是一个过场。
中期何杰老师帮我看开题报告和中期答辩相关内容的时候，几乎是把我写的内容删干净了，每句话都重新组织了一遍，我那时才稍微对这类“写文”的工作，有那么一丝钦佩。后期我迷迷糊糊的写到了2万多字，其实说难听点，就是把拉出来的稀重新摆成佳肴的样子，通过了查重，几乎是觉得自己马上就能毕业了。
10 号就答辩了，我 8 号去找何老师给我签字，顺便拿着 PPT 进行了预答辩。答辩到一半的时候，何杰老师严肃的说：“你这个不行”，然后对着我的摘要和目录就是一顿乱画，我那时候已经迷糊了，内容都没看怎么能把标题划掉呢，但是我没说，我只是灰溜溜的走了，马上骑摩托回出租房（宿舍晚上会断电），然后开始写，摘要重新写了一遍，2、3、4大段整个剪切出来，1万多字就没了。然后一边粘贴一边写，过程就不说了，睡了4个小时，9号清晨8点赶回学校，交了我的论文给何杰老师，他说可以了，让我去签字。
答辩完交终稿前，何杰老师又让我重新去了一次，他把我的摘要又删了重新写了一次，经过多次修改后，我的摘要发生了变化：
原版摘要：
随着技术的发展，计算机的运算速度飞速提升，这使得许多原本不可能完成的计算任务，在GPU高速算力的加持下，得到了结果。GPU逐渐成为在科学计算的主流。随后NVIDIA推出了CUDA（统一计算设备架构）通用并行计算架构提供了非常易用的GPU开发工具，基于GPU的云计算平台也不再是一个新概念，一些云计算服务商已经推出了GPU云计算服务，可供公司、学校等机构进行规模较大的计算。想要进行类似的规模化AI生产，除了高度依赖GPU的算力本身之外，还需要平台具有调度能力，提供根据优先级抢占调度实现集群算力的共享。
平台本身的开发是非常重要，但是平台搭建与维护，软件升级与回滚，数据的备份与恢复这些工作，往往需要持续数年甚至数十年之久，并且这些操作繁琐而且容易出错。本课题设计并实现了一套自动部署工具，能够实现 GPU 云计算服务平台的部署与后期维护等相关工作。本设计使用了一主多从的工作模式，自动地将产品部署到集群中，同时负责产品的升级、回滚、备份、恢复等功能。实现了该项目的智能运维自动化。
本文介绍了工具在设计，开发过程中所使用的技术和具体的实现细节。在测试部署过程中，相比人力手动部署，本工具显著提升了部署效率，杜绝了任何出错的可能性。
摘要最终版：
GPU逐渐成为科学计算的主流。同时一些云计算服务商已经推出了GPU云计算服务，可供公司、学校等机构进行规模较大的计算。平台本身的开发是十分重要的，但是平台搭建与维护，软件的升级与回滚，数据的备份与恢复这些工作，往往需要大量的人工操作而且容易出错，从而影响平台的稳定性和运行维护效率。
本课题设计并实现了一套自动部署运维工具。本工具基于声明式API实现了：（1）GPU云计算服务平台系统软件在的GPU计算机集群上的自动化部署；（2）GPU云计算服务平台系统软件的自动升级、回滚、备份等运维功能。此外，本工具通过一主多从的工作模式，实现了部署和运维过程在意外中断情况下的自动恢复功能。
本文介绍了工具的系统架构，开发过程中所使用的设计模式以及开发技术和具体的实现细节。通过测试验证了自动部署和自动运维功能的正确性，评估了系统的可靠性、伸缩性、可扩展性。通过与传统的手动部署和手动运维进行时间开销对比，评价了本工具在典型部署和运维任务上的效率提升程度。
何杰老师最后回答了我一个问题：“你是如何把问题描述的如此清楚的？”，他思考了一会儿，然后总结道
（1）首先是分点，按点来叙述； （2）其次是对要描述的内容起名字，并且添加定语帮助理解，如：GPU云计算服务平台系统软件在的GPU计算机集群上的自动化部署，使用定语和名词将这个事情描述清楚，如果描述不清楚再加辅助描述。 （3）需要长时间的有意识的锻炼，写东西的时候需要咬文嚼字。</description>
    </item>
    
    <item>
      <title>如何选择一瓶红酒</title>
      <link>/post/2021/05/23/how-to-choose-a-bottle-of-wine/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/23/how-to-choose-a-bottle-of-wine/</guid>
      <description>这两天，不知道为什么，突然想起来之前朋友送的一瓶云南干红，又涩，又酸，就想研究研究葡萄酒到底有哪些花样，提升提升逼格，顺便练练打字。
我们通常看到的葡萄酒都是红葡萄酒，买回去试试之后往往发现又酸又涩。
葡萄酒通常分为几个分类：红葡萄、白葡萄、粉葡萄、气葡萄酒。
其中红葡萄酒是红葡萄带皮酿造的，所以颜色偏正红，味道会”正“一些；
白葡萄酒是白葡萄去皮酿造的，所以颜色是透明偏黄，味道会清爽一些； 粉葡萄和气葡萄酒的酿造工艺更加复杂。粉红葡萄是在某个步骤之后将皮去掉，所以酿造出来的酒稍微带一点粉红色。这两种的图片我就不贴了，不过气葡萄中有个问题是，并不是所有的气泡葡萄酒都叫香槟~
我们可以从两个方面来选择酒，第一个方面是如果对应着吃的东西比较重，如牛排、龙虾等餐食，就可以搭配味道更”正“的红酒；如果对应着吃的东西比较清爽，如、沙拉、餐后甜点，就可以选择除了红葡萄酒以外的几种清爽的酒。
另一个方面看喝酒的人的性别，岁数。如果是一个年长的或者饮酒年份较长的人，可以推荐红酒，因为会稍微酸涩一些，香味醇厚一些；如果是第一次体验喝酒的同学，建议不要喝深红色的葡萄酒，容易让你一次就丧失所有幻想。
葡萄酒也会有一些分类：也有很多种分类方式，比如酒庄，或者葡萄种类，这里就按照葡萄种类来分类：
红酒：黑皮诺 &amp;lt; 海格 &amp;lt; 赤霞珠（小于号是味道是否重，这里引用 Tannin单宁 和 Bodied酒体 两个概念，这两个值越大味道越重）
白葡萄：霞多丽
之后再补更多知识
气泡酒 https://zh.wikipedia.org/wiki/%E6%B0%94%E6%B3%A1%E9%85%92 </description>
    </item>
    
    <item>
      <title>Docker 玩的障眼法</title>
      <link>/post/2021/01/13/how-docker-plays/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/01/13/how-docker-plays/</guid>
      <description>刚刚入手docker会感觉有点像虚拟机，但是又有许多不同，一查资料都在说虚拟机虚拟了磁盘/CPU&amp;hellip;，docker轻量但是基本没说究竟怎么回事。 今天学习了 Docker 的一些实现细节之后，发现这些只不过都是 Docker 或者说 Linux 玩的障眼法，让我们来看一眼。
容器是什么？ 容器其实就是在操作系统启动进程的时候，通过附加 一些参数，利用操作系统提供的接口来 隔离不相关资源，最后得到一个特殊的进程。
Pid 障眼法 我们知道在 Linux 中，启动进程需要使用函数（系统调用），例如：fork, vfork, clone 等。下面给出一个 clone 的函数签名。
1 int pid = clone(main_function, stack_size, SIGCHLD, NULL); 使用这个函数，系统就会为我们创建一个新的进程，并且返回它的进程号 pid 。
1 int pid = clone(main_function, stack_size, CLONE_NEWPID | SIGCHLD, NULL); 如果我们在调用的时候，在参数中指定 CLONE_NEWPID 参数，在该进程内，就会看到一个全新的进程空间。
也就数说，这个进程会以为自己就是 1 号进程，但是其实这只是一个障眼法，在宿主机的进程空间里，进程的 PID 还是真实的数值。
这是 Linux 中的一个叫 Namespace的机制
障眼法的更优解释（命名空间） 所以当你理解了进程 Namespace 的时候，你就会明白，其实并没有容器。Docker 帮你启动你的进程的同时，使用了操作系统提供的命名空间限制，让你的进程以为自己在一个独立的空间中。
Mount Namespace 让你的进程以为自己有根目录，其实那只不过是挂载了一个目录目录到进程的根目录。 Network Namespace 让你的进程隔离于其他网路设备，只能看到你为它连接的网络设备。 User Namespace 将本地的虚拟 user-id 映射到真实的 user-id 中。 包括就连主机名等等其他资源，也可以用障眼法隔离起来，只要理解了，就不会觉得 Docker 很神奇了。</description>
    </item>
    
    <item>
      <title>毕业总结 2020</title>
      <link>/post/2020/12/28/%E6%AF%95%E4%B8%9A%E6%80%BB%E7%BB%93-2020/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/12/28/%E6%AF%95%E4%B8%9A%E6%80%BB%E7%BB%93-2020/</guid>
      <description>一直以来，我写文都是伴随着很强的目的性，例如：抨击某个事实、展示XX成果。
我基本上没有写过水文，不过今天我还是想和你（认识或者不认识我的人）做一次汇报，汇报我这一年干了啥，同时也让我自己清楚一年以来的变化。
年度总结 今年总体来说并不是很顺利的一年，但算是我高产的一年。我突然发现自己一个人待时，既不爱打游戏也不爱看电影，就只是简单的阅读 + 学习 + 输出。但是很遗憾的是我没有给自己任务量化，例如：看n篇论文、n本书等等。因此我现在也只能通过之前博客里写的简单日报来回忆所做的事情。按顺序我做了以下事情：
3月 看了蒙特卡洛和α-β剪纸搜索来实现一个五子棋，其实是为了完成作业（人工智能）。 4月 在参加的 谈课 创业团队中重构产品后端和前端，完善文档（10天）；这时候已经入职长亭实习了，有个工作需求本来要用 CGO 来实现，最后搞不定就使用 GRPC 来写了个胶水系统（5天）；继续研究这个蜜罐系统（&amp;hellip;.）。开始读书《Unix编程艺术》。 5月 重构在公司写的代码；开始看并且翻译 learncpp 了。 6-7月 潜心仔细看了协议栈 HTTP/1 和 HTTP/2 ，也基于 TCP 层手动实现了一套 HTTP 协议的工具。 8-9 月 开学 + 打护网 10-12月 找工作 即将毕业 看到周围的低年级的同学正在被各种课程折磨：数字逻辑、模数电……
我相对来说轻松的多，已经不用再担心作业交不上，上课被点名了等等各种事情了，这对我来说是一种解脱。
但同时，也意味着即将到来的繁重的工作压力，又会给我带来挑战。
如果你问我「上大学是什么样的体验？」
我会告诉你这是我痛苦并快乐的经历。我对数学不太感冒，但是我母校的信息安全就像是在专门学数学一样，这让我三年来都倍受折磨，分外痛苦；另一方面在是快乐的，当我遇到痛苦的时候我可以去选择逃避它们，可以和我的舍友一起开黑游戏……
上课的时候，我可以选择划水，或者做点别的，但是工作的时候我没有这样的选择，离开教学的环境，无论什么困难只能硬着头皮上。
侧重点的变化 我自己从最早的 Web 框架使用者，逐步调整自己的专注的面：
逐步开始理解 HTTP 框架，并且尝试造轮子； 写一些高性能中间件，初步结合算法，对自己编写的代码时空复杂度有一定的把控； 使用 Golang 已经有一年了，开始对其内部实现，GC，调度等，进行剖析。 技术成长 年初大部分时间在编写 Golang 的业务，对底层的设计和实现不感兴趣不了解。
在逐步开发中发现了一些 Golang 设计的奇妙之处，例如：用户无需为在变量在栈还是堆上分配操心，Golang 会在编译的时候进行逃逸分析，并且自动实现。这些细节让我对 Golang 的底层实现产生了浓厚的兴趣，我开始阅读 Golang 的源代码。
并且由于 Golang 的内存策略比较激进，迫使我一边又在学习 CPP ，疫情在家这段时间没有什么其他的事情困扰我，一段时间的狂奔让我受益颇多，也暴露出一些问题：</description>
    </item>
    
    <item>
      <title>MySQL - LOCKS 锁的类型</title>
      <link>/post/2020/11/28/mysql-locks-%E9%94%81%E7%9A%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/11/28/mysql-locks-%E9%94%81%E7%9A%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>MySQL 有哪些锁 共享/排它锁(Shared and Exclusive Locks) 意向锁(Intention Locks) 记录锁(Record Locks) 间隙锁(Gap Locks) 临键锁(Next-key Locks) 插入意向锁(Insert Intention Locks) 自增锁(Auto-inc Locks 1. 共享/排它锁(Sharedand Exclusive Locks) 读取数据加共享锁，读读之间可以并行。排他锁与任何锁都互斥。
2. 意向锁(Intention Locks) 意向锁是一个表级别的锁 分为两种类型 意向共享锁 select ... lock in share mode; 意向排他锁 select ... for update; 3. 记录锁 4. 间隙锁 1 select * from lock_example where id between 8 and 15 for update; 5. 临键锁（Next-key Locks） 6. 插入意向锁(Insert Intention Locks) 7. 自增锁(Auto-inc Locks) 总结 按锁的互斥程度来划分，可以分为共享、排他锁；</description>
    </item>
    
    <item>
      <title>MySQL - MVCC 并发版本控制实现</title>
      <link>/post/2020/11/27/mysql-mvcc-%E5%B9%B6%E5%8F%91%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/11/27/mysql-mvcc-%E5%B9%B6%E5%8F%91%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%AE%9E%E7%8E%B0/</guid>
      <description>版本链 在InnoDB引擎表中，他们的聚簇索引记录中有两个隐藏列：
trx_id：用来存储对数据进行修改时的事务id
roll_pointer：每次对哪条聚簇索引记录有修改的时候，就会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。
id name trx_id roll_pointer 1 小明 50 0x00af 例如目前有个trx_id是60的事务正执行如下语句：update table set name = &#39;小明1&#39; where id = 1
此时在 undo 日志中就存在版本链
id name trx_id roll_pointer 1 小明1 60 last_version ↓指向 1 小明 50 null 版本链可以类似git一样，对一行的数据进行版本控制，可以通过 undo_log进行回滚操作
ReadView 读已提交和可重复读的区别就在于它们生成ReadView的策略不同。
ReadView中主要就是有个列表来存储我们系统中当前活跃的读写事务（ begin未 commit 的 tx）。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务 id 为[80,100]。
如果你要访问的记录版本的事务 id 为 50，id &amp;lt;= 80(最小事务id)，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。 如果你要访问的记录版本的事务 id 为 90, id &amp;gt;= 80 &amp;amp;&amp;amp; id &amp;lt;= 100，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。 如果你要访问的记录版本的事务id为110，id &amp;gt;= 100，那说明这个版本是在 ReadView 生成之后才发生的，所以不能被访问。 这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</description>
    </item>
    
    <item>
      <title>CPU上下文切换</title>
      <link>/post/2020/11/12/cpu%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/11/12/cpu%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/</guid>
      <description>CPU 上下文 当多个进程竞争同一个 CPU 的时候，会导致大量的上下文切换，从而使得系统负载升高。
常见的系统都是多任务操作系统，进程数量远大于 CPU 数量，系统会在很短的时间内将 CPU 资源轮流分给不同的进程使用，从而营造多任务的错觉。
CPU 知道其实并不用关心任务从从哪里开始，它只需要把 PC（程序计数器）中的指令取出来执行即可。
即将执行的下一条指令位置，寄存器等等这些速度极快的在 CPU 中的小内存被叫做 CPU 上下文 。
CPU 上下文切换 就是把前一个任务的的上下文保存起来，然后使用新的上下文覆盖当前上下文，等执行完当前任务或者时间片到了再切换回原来的上下文。
根据任务不同，分成不同的上下文切换：进程上下文切换，线程上下文切换以及中断上下文切换
进程上下文切换 正常执行的进程处于 Ring3 （用户空间），而内核空间是 Ring0，当进程尝试读写文件的时候，会先使用系统调用打开文件描述符，open() -&amp;gt; write() -&amp;gt; close() 等一系列操作，系统调用也是会是的 CPU 进行上下文切换的，通常涉及上下文切换的在以下场景：
时间片耗尽 进程系统资源不足 进程通过sleep函数休眠 高优先级进程运行 进程是由内核来管理调度的，进程的切换只能发生在内核态，所以进程的上下文切换不仅包括了虚拟内存、栈、全局变量等，还包括了内核堆栈，寄存器的让那个内核空间的状态。
线程上下文切换 线程和进程的区别？
当进程只包含一个线程时，可以认为进程等于线程 当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局全局变量。 线程有私有数据，栈，寄存器等。 其实没有进程上下文切换，只有线程上下文……
因为线程是调度的单位，然而调度的过程中会发现两种不同的情况：
第一种，前后两个线程不属于同一个进程。此时，因为资源不共享，所以切换过程和进程一样。 第二种，前后两个线程属于同一个进程。此时，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不同，只需要切换线程的私有数据，寄存器等不共享的数据。
线程共享相同的虚拟内幕和全局变量等资源，这些资源在上下文切换时不需要修改。
中断上下文切换 对于同一个 CPU 来说，中断处理比进程拥有更高的优先级。
如何查看系统中断 vmstat 1 1 每隔1秒输出1次，总计输出1秒
1 2 3 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 2 0 0 269564 64872 890480 0 0 168 52 975 7756 6 9 86 0 0 r：是就绪队列，超过cpu核心数就会产生竞争 us和sy： user 和 system 列：表示 CPU 分别被 user 和 system 占用多少？ in：指标是975，说明每秒中断975次 cs：上下文切换 7756次 使用 pidstat 能看到进程详细信息</description>
    </item>
    
    <item>
      <title>MySQL 八股文</title>
      <link>/post/2020/11/05/mysql-%E5%85%AB%E8%82%A1%E6%96%87/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/11/05/mysql-%E5%85%AB%E8%82%A1%E6%96%87/</guid>
      <description>有的面试官挺喜欢用自己那套规则来面试，搞的乌烟瘴气，全是背题的。
Mysql 存储引擎 创建表格的时候指定
名称 名称解释 事务 锁 MyIsam 非聚集索引，索引和数据分别存放 非事务安全型 支持表锁 InnoDB 数据和索引在一个文件中 事务安全型 支持行锁 MyISAM 特点：需要访问速度快，对事务完整性没有要求，以SELECT、INSERT为主的应用基本都可以使用这个引擎
不支持事务
不支持外键
访问速度快
损坏和修复：每一个表都有一个标志，来标注上次是否正常关闭，MyISAM类型的表可能会损坏，可以使用CHECK TABLE语句来检查MyISAM表的健康，并用REPAIR TABLE语句修复一个损坏的MyISAM表。
MyISAM的表还支持3种不同的存储格式：
静态(固定长度)表：默认的存储格式。静态表中的字段都是非变长字段，这样每个记录都是固定长度的，这种存储方式的优点是存储非常迅速，容易缓存，出现故障容易恢复；缺点是占用的空间通常比动态表多。 动态表：动态表包含变长字段，记录不是固定长度的，这样存储的优点是占用空间较少，但是频繁到更新删除记录会产生碎片，需要定期执行OPTIMIZE TABLE语句或myisamchk -r命令来改善性能，并且出现故障的时候恢复相对比较困难。 压缩表：压缩表由myisamchk工具创建，占据非常小的空间，因为每条记录都是被单独压缩的，所以只有非常小的访问开支。一般而言，如果你的系统是I/O瓶颈，那么可以使用CPU进行压缩与解压缩，以CPU换取I/O。 使用场景：
做很多 count 的计算 插入不频繁，查询非常频繁 没有事务 InnoDB 特点: InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。
使用场景
可靠性要求比较高，或者要求事务 表更新和查询都相当的频繁，并且表锁定的机会比较大的情况 为什么使用 B+ 树 相对于二叉树： 理论上二叉树的查找比较次数都是最小最划算的，但是为什么不用二叉树呢？
因为我们要考虑磁盘IO的影响，索引存放在磁盘中，不可能全部加到内存中，只能逐一加载每一个磁盘页，所以我们要减少IO次数，而可以相当程度上认为IO次数就是树高度，
相对于 B 树： B+ 树的中间节点不保存数据，所以磁盘页能容纳更多节点元素，更”矮胖“；如果是范围查找，B树需要反复的查找，而 B+ 树只需要遍历即可。
Mysql 数据库索引 这块八股文都比较复杂，还得专门找时间学习
数据库的事务特性 说道事务特性，还得说说四大特性：
原子性（Atomicity）：要么成功，要么失败回滚，失败的操作不允许对数据库造成任何影响 一致性（Consistency）：事务必须从一个状态转换到另一个状态，比如转账，A-&amp;gt;B后，两个人的钱加起来总和不变 隔离性（Isolation）：隔离性是数据库为每个用户开启的事务，不能被其他事务干扰，如果两个并发的事务，T1和T2，相互感受不到对方对数据库的修改对自己的影响。 持久性（Durability）：一旦事务提交了，返回结果了，对数据库的修改就是永久的。 如果事务不隔离，就会出现以下几种问题：
脏读：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。 不可重复读：在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。 幻读：在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几行数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。 数据库的四种事物的隔离级别 Read Uncommitted（读取未提交内容）：在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）</description>
    </item>
    
    <item>
      <title>Redis 缓存策略</title>
      <link>/post/2020/11/05/redis-%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/11/05/redis-%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</guid>
      <description>缓存更新策略 缓存中的数据可能会和数据源的真实数据有一段时间不一致，需要利用一些策略来进行更新：
LRU/LFU/FIFO 算法 超时剔除 主动更新 策略 一致性 维护成本 LRU/LFU/FIFO 最差 低 超时剔除 较差 较低 主动更新 强 高 缓存粒度 如何选择缓存的粒度也比较重要，缓存粒度太大（全部缓存）会导致内存上升。如果缓存粒度太细，反复修改则会降低代码的可维护性
缓存穿透 也就是类似缺页，需要从mysql查询再缓存的情况出现。例如攻击者请求了不存在的ID，然后导致大量穿透，数据库读写较慢，拖垮服务器。
这时候有可以设置空对象，如果设置空对象，意味着缓存中存储了很多key，会消耗很多空间，如果是攻击则问题更加严重，设置一个较短的过期时间可以缓解。
如果这时候，在过期时间内，存储层添加了这个数据，就会导致缓存存储不一致，可能影响业务。
缓存定期删除方式 惰性删除：读写之前判断key是否过期（CPU友好） 定期删除：定期抽样key，判断是否过期（内存友好）</description>
    </item>
    
    <item>
      <title>用小内存聚合非常大量的日志</title>
      <link>/post/2020/10/25/%E7%94%A8%E5%B0%8F%E5%86%85%E5%AD%98%E8%81%9A%E5%90%88%E9%9D%9E%E5%B8%B8%E5%A4%A7%E9%87%8F%E7%9A%84%E6%97%A5%E5%BF%97/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/10/25/%E7%94%A8%E5%B0%8F%E5%86%85%E5%AD%98%E8%81%9A%E5%90%88%E9%9D%9E%E5%B8%B8%E5%A4%A7%E9%87%8F%E7%9A%84%E6%97%A5%E5%BF%97/</guid>
      <description>0x0 楔子 在旷世科技的面试中，以为面试官出的题目，某台机器产生了非常多的日志，格式如下：
1 2 3 4 5 2020-10-20 10:21:30 /api/login 300ms 2020-10-20 10:21:40 /api/a 192ms 2020-10-20 10:21:50 /api/login 210ms ........ 2020-10-20 22:21:30 /api/a 22ms 日志容量大约是10G，然后内存只有2G，希望我们能尝试读取日志，聚合并且输出到磁盘
最终结果输出大约是这样
1 2 /api/login 510ms /api/a 214ms 看到这个题目的时候，我第一反应就是分割处理，局部聚合，然后导入内存局部聚合，输出，最终到一次能搞定的程度，在全部聚合。 但是当我简单写了一些代码之后，描述了我的想法之后，面试官点点头，但是提出了局部聚合也会爆内存，可能想引导我说出什么其他的方法，可是我不知道他到底想让我说什么。
0x1 分治 在非常短的时间内，我虽然把分治的过程说出来了，但是我没有说出的这个关键词，分治。
我认为就是对日志进行分割，再分割，最终到达2G内存能够读入的状态，局部聚合，再聚合最后全局聚合，这就是分治的思想，可是我当时是太愚钝，没有说出关键词，搞的面试官也很着急。
0x2 指针 + LFU 首先使用指针指向文件头部，然后创建一个 LFU 表，尺寸大小刚好为 2G，然后就开始读取并且存储在 LFU 中，当 LFU 缓存满了就把命中频率最少的路由给先暂时缓存到文件中，等到下次换入的时候，再文件中读取，我觉得这个方法是一个更好的方法，它写起来更简单，磁盘读写的次数会相对少（如果URL的分布不太离散），更加智能。
0x3 建堆 上面的 指针 + LFU 确实挺工程的，我认为已经非常聪明了。
我可以对这些记录建堆，这样最终输出的也就已经是排序的了，把最后的排序平均分配到每一次操作了。
首先创建一个 1G 大小的堆空间，和 1G 大小的hash表，使用hash表能快速知道字符串在堆的哪个位置，使用堆能半自动化排序。
具体工程实现再继续讨论吧。</description>
    </item>
    
    <item>
      <title>手动用cpp实现http(五)</title>
      <link>/post/2020/08/06/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E4%BA%94/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/08/06/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E4%BA%94/</guid>
      <description>创建于 2020-08-06，完成于 2020-08-07
在之前的课程(四)中我们讲了有关如何套用 socket 实现 bufReader，并在此基础上读取 http 请求和返回值。
今天的任务是 &amp;ldquo;[易]实现主程序逻辑，监听端口，接收请求&amp;rdquo;。
所有的代码都在 https://github.com/dashjay/http_demo/tree/5-main-work 中
Let&amp;rsquo;s do it
0x1 多线程编程 作者对多线程编程了解不是很多，基本上就是在此场景下够用而已。
multi_thread
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;iostream&amp;gt; #include &amp;lt;thread&amp;gt; void thread_sleep(int second) { std::this_thread::sleep_for(std::chrono::seconds(second)); std::cout &amp;lt;&amp;lt; &amp;#34;thread exit&amp;#34; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } int main() { std::thread thr(thread_sleep, 5); thr.join(); std::thread thr2(thread_sleep, 999); thr2.detach(); std::cout &amp;lt;&amp;lt; &amp;#34;program exit directly&amp;#34; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } 注意几个点：</description>
    </item>
    
    <item>
      <title>手动用cpp实现http(四)</title>
      <link>/post/2020/08/04/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E5%9B%9B/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/08/04/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E5%9B%9B/</guid>
      <description>在之前的课程(三)中我们讲了一些和配置加载与log程序的工作。
今天的任务是 &amp;ldquo;[难]定义一个bufReader类，并且使用该bufReader从TCP流中解析HTTP请求和返回体&amp;rdquo;，这是唯一一个被我标识为难的东西，其实也不难，只是相对繁琐。
所有的代码都在 https://github.com/dashjay/http_demo/tree/master/4-bufreader 中
本节课的代码，全部在上一节课的基础上
Let&amp;rsquo;s do it
0x1 TCP基于流传输 TCP传输从不以包为单位，也就是说，一个 GET 请求或一个 POST 请求并不是一个包。也不是你所想象的（我们之前描述的样子）,我们想象总是很美好，以为它是这个样子的，读起来很轻松。
1 2 3 4 GET / HTTP/1.1 Key: Value body 把他画成上面这样只是为了方便理解，其实他是这样的：GET / HTTP/1.1\r\nKey: Value\r\n\r\nbody。而且，请求和请求之间没有什么界限。因此他们会是这样的：GET / HTTP/1.1\r\nKey: Value\r\n\r\nbodyGET /...，你在读取的过程中可能会遇得到很多奇怪的事情：
请求长度比你想象的长一点 请求长度比你想象的短一点 &amp;hellip;. 在读取过程中总会遇到各种不同的问题，读起来会很痛苦，如果写一个reader帮助我们实现一些类似 readline() 或 read_n()的函数，这样我们起码能在读取的过程中，节省一些精力。
我们倒过来思考吧，如果我现在有了一行数据，我应该怎么提取出数据呢？
我们一起看一下这段代码，我们尝试简单的从一行 char 字符串中提取出请求的 method。
1 2 3 4 5 6 7 8 9 10 11 12 const char *line = &amp;#34;GET / HTTP/1.1\r\n&amp;#34; auto idx{line}; while(*idx!=&amp;#39; &amp;#39; || *idx !</description>
    </item>
    
    <item>
      <title>手动用cpp实现http(三)</title>
      <link>/post/2020/08/03/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E4%B8%89/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/08/03/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E4%B8%89/</guid>
      <description>创建于 2020-07-31，最终修订于 2020-08-06
在之前的课程(二)中我们讲了有关 HTTP 头部，请求体和返回结构在 cpp中的定义，今天我们来说一些很不相关，但是也很重要的内容：
今天的任务是 &amp;ldquo;[易]引入cpptoml从文件读取配置，引入spdlog尝试打log，帮助调试&amp;rdquo;。
所有的代码都在 https://github.com/dashjay/http_demo/tree/3-cpptoml-spdlog 中
Let&amp;rsquo;s do it
0x1 为什么要载入配置文件 众所周知，编译类的程序，编译一次，可运行n次，在通过一些测试后，即可常年工作。但是有些情况下，我们会尝试通过一些方法修改程序的行为，例如：
程序的配置项除了监听端口之外，其实还有很多其他的例如，tls证书位置。 平时日常使用时只会打印出一小部分log，防止大量log堆积导致一些问题，但是当程序出现异常的时候，希望能多打印一些程序，需要调整log程序的打印级别。 当遇到这些内容修改时，我们是不希望再编译一遍的。
而如果这些命令通过标准输入，或者运行时作为参数传入都不是很方便，因此我们会使用配置文件。
我推荐使用 TOML 格式来作为配置，不用再因为担心缩进，支持的格式也很丰富，数组，浮点数，字符串，等等。
经过一些选择之后我找到一个库，叫 cpptoml
0x2 cpptoml A header-only library for parsing TOML configuration files.
安装 1 2 3 git clone https://github.com/toml-lang/toml.git cd toml; mkdir build; cd build cmake .. &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install 看到这里你即便不知道cmake有什么用，但是你也知道他有多常见了吧？ 到目前为止我们电脑里已经安装了sockpp, cpptoml. 他们一个是有链接库的，一个是header only的。
小尝试 本次的所有代码都基于上次课程的开始。
1 2 3 4 5 6 7 8 9 10 11 12 #include&amp;lt;iostream&amp;gt; #include &amp;#34;cxxhttp.</description>
    </item>
    
    <item>
      <title>手动用cpp实现http(二)</title>
      <link>/post/2020/08/02/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E4%BA%8C/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/08/02/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E4%BA%8C/</guid>
      <description>创建于 2020-07-31，最终修订于 2020-08-06
在之前的课程(一)中我们说有关Cmake和知识，并且选用了一个Socket库
今天的任务是 &amp;ldquo;[易]定义HTTP请求和返回体的结构，构建并输出HTTP请求和返回体到标准输出。&amp;quot;。
所有的代码都在 https://github.com/dashjay/http_demo/tree/master/2-http-request-response 中
Let&amp;rsquo;s do it
0x1 初识HTTP请求结构 这就是一个简单的HTTP请求，我习惯把他分为三个部分：请求行（第一行），请求头（n行），请求体（之前有一个空行）
1 2 3 4 5 6 7 ----- GET / HTTP/1.1\r\n Key1: Value1\r\n Key2: Value2\r\n \r\n body(if these is a body) ----- 到这里，网上充斥着大量的教程，讲解着有关请求结构的，我不打算做过多赘述，它非常简单，大多都还遵循一套rfc2616中所描述。
如果你想了解更多，建议直接看 RFC 并且使用 curl xxx -v 来了解更多，而不要相信那些营销号的文章《99%的人不知道GET和POST的区别》或者《99%的人都错用了POST请求》，很多错误的言论诸如”POST 请求会发两个包“，这种错误描述，明明学了计算机网络的我却深信不疑。（PS：这种文章在知乎也有，拉低平均水平）。
我们可以使用这样的命令，curl baidu.com -v（对不起了，百度，又让你的服务器负担加重了），会得到如下结果。curl 亲切的使用了 &amp;gt; 开头表示客户端发给服务端的数据，用 &amp;lt; 开头表示服务端发给客户端的。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 curl baidu.</description>
    </item>
    
    <item>
      <title>手动用cpp实现http(一)</title>
      <link>/post/2020/07/31/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E4%B8%80/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/07/31/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E4%B8%80/</guid>
      <description>创建于 2020-07-31，最终修订于 2020-08-06
在之前的介绍课程(零)中我们说了要用六节课来实现一个HTTP，
今天的任务是 &amp;ldquo;[易]简单的Cmake的教程，选用一个Socket库并实现一个echo&amp;rdquo;。
所有的代码都在 https://github.com/dashjay/http_demo/tree/master/1-cmake-socket-echo 中
Let&amp;rsquo;s do it
0x1 编写一个HelloWorld并尝试使用Cmake编译它 1 2 3 4 5 #include&amp;lt;iostream&amp;gt; int main(){ std::cout &amp;lt;&amp;lt; &amp;#34;Hello World!&amp;#34; &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; } 我们本可以使用如下命令进行编译并且运行
1 2 3 g++ -o main main.cpp ./main Hello World! 但是我们要尝试使用一次Cmake[1]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 指定cmake的版本，随意了，我们不会用太高级的功能 cmake_minimum_required(VERSION 3.16) # set可以设定一个变量 set(project_name http_demo) # 项目名称 ${xxxx} 可以导入之前的变量 project(${project_name}) set(CMAKE_CXX_COMPILER &amp;#34;c++&amp;#34;) # 编译器 set(CMAKE_CXX_STANDARD_REQUIRED True) set(CMAKE_CXX_STANDARD 17) # cpp指定标准 # 设定编译的FLAGS set(CMAKE_CXX_FLAGS -g -W) string(REPLACE &amp;#34;;&amp;#34; &amp;#34; &amp;#34; CMAKE_CXX_FLAGS &amp;#34;${CMAKE_CXX_FLAGS}&amp;#34;) message(STATUS &amp;#34;CMAKE_CXX_FLAGS: &amp;#34; &amp;#34;${CMAKE_CXX_FLAGS}&amp;#34;) # 添加一个可执行文件 add_executable(main main.</description>
    </item>
    
    <item>
      <title>手动用cpp实现http(零)</title>
      <link>/post/2020/07/30/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E9%9B%B6/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/07/30/%E6%89%8B%E5%8A%A8%E7%94%A8cpp%E5%AE%9E%E7%8E%B0http%E9%9B%B6/</guid>
      <description>2020年7月，笔者经过学习了cpp后打算入坑尝试手动实现 HTTP 服务器，过程中遇到很多问题，本文记录了笔者留下的一些记录，提供参考。
下面的叙述中含有一些脚注，为了不影响已经非常熟悉的同学的阅读，我把一些说明放到了脚注里，方便阅读。
Repo我开在这里，欢迎大家点个Star或者Fork操作。https://github.com/dashjay/http_demo.git
本教程[1]，使用6节课程/文章，尝试使用最简单的CPP知识实现一个高性能，简单的的HTTP Server。
[易]简单的Cmake的教程，选用一个Socket库[2]并实现一个echo[3]。link [易]定义HTTP请求和返回体的结构，构建并输出HTTP请求和返回体到标准输出。link [易]引入cpptoml从文件读取配置，引入spdlog尝试打log，帮助调试。link [难]定义一个bufReader类，并且使用该bufReader从TCP流中解析HTTP请求和返回体。link [易]实现主程序逻辑，监听端口，接收请求。 [选]实现其他HTTP附加功能。 更新日志 2020-08-06：维护 4 个分支太麻烦了，所有教程全部放到 master 分支的不同文件夹下 2020-08-05：更新教程 4-bufreader 我们要准备的东西(推荐） 一个顺手的IDE，推荐CLion，VScode，也可以用VIM，Emacs或你顺手的。 建议使用在Linux或MacOS下进行，因为我本地没Windows，没法为大家验证过程可行性。 你的耐心 解释
算不上什么教程，顺便测试一下脚注。 HTTP/GRPC 等等这样的协议通常底层采用TCP来实现，也就是学校里学到的那种面向流的服务，cpp中的系统调用实现的socker接口用起来有些不顺手。因此我找到了一个现代的Socket库https://github.com/fpagliughi/sockpp来帮助我们在这节课中完成HTTP服务器。 你发给它什么，他就回复什么，常见的网络库都会用这个代替HELLOWORLD </description>
    </item>
    
    <item>
      <title>使用c-like string strcat 的研究</title>
      <link>/post/2020/07/17/%E4%BD%BF%E7%94%A8c-like-string-strcat-%E7%9A%84%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/07/17/%E4%BD%BF%E7%94%A8c-like-string-strcat-%E7%9A%84%E7%A0%94%E7%A9%B6/</guid>
      <description>0x1楔子 几天前在学习cpp的时候，因为好奇，在上面试了一些 c-like string 拼接操作，一下击穿了我自己，我写了个样例。
1 2 3 4 5 6 7 8 9 #include&amp;lt;cstring&amp;gt; #include&amp;lt;iostream&amp;gt; int main(){ char Hello[64]{&amp;#34;Hello World&amp;#34;}; char temp[]{&amp;#34;Alex&amp;#34;}; std::strcat(temp,Hello); std::cout &amp;lt;&amp;lt;temp[5]&amp;lt;&amp;lt;std::endl; } 这段代码在gnu-gcc上直接编译不会过，但是我用的mac llvm，编译过了并且输出e。 这时候我就很奇怪了，temp应该只是一个 [&#39;A&#39;, &#39;l&#39;, &#39;e&#39;, &#39;x&#39;, &#39;\n&#39;] 这样一个字符串，但是为什么strcat之后，却能”越界“访问？
为此，我提出了灵魂拷问：
strcat底层是如何操作的？ 这个不安全的操作被llvm优化了么？ 明显的越界操作为什么得到了预期的结果？ 如果第二个参数cat到第一个参数不够大，那么会重新分配，这对于cpp来说是否是一种内存回收操作？ 问题有点天马行空，但是一个一个来看看吧。
0x2 strcat 底层如何操作 1 2 3 4 5 6 7 8 9 10 11 #ifndef STRCAT # define STRCAT strcat #endif /* Append SRC on the end of DEST.</description>
    </item>
    
    <item>
      <title>cpp 的虚表到底是什么意思？</title>
      <link>/post/2020/07/05/cpp-%E7%9A%84%E8%99%9A%E8%A1%A8%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/07/05/cpp-%E7%9A%84%E8%99%9A%E8%A1%A8%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</guid>
      <description>0x1 Binding 想弄明白虚表是什么首先要清楚绑定(binding)的概念。
绑定： 可以通过标识符(identifiers)-&amp;gt;地址(address)。标识符是函数和变量都有的，但是今天我们为了学习函数，因此只讨论和函数有关的内容。
有两种绑定，early binding and late biding.
0x2 Early Binding 编译时遇到要调用函数时，已经具体调用哪个函数，当遇到调用的某个函数的时候，编译器会用一条指令去替换这个函数，帮助CPU跳到地址所在的函数入口，开始执行，这种 Binding叫Early Binding，也就是编译的时候就确定的绑定模式。
例如著名的A+B问题，就是一个常见的Early Binding。
1 2 3 4 5 6 7 8 int add(int x, int y) { return x + y; } int main(){ add(3, 5); // 编译时绑定 } 0x3 Late Binding (Dynamic binding) 有时候，不到运行时（runtime）是不知道要调用哪个函数的，这就是所谓的 late binding, 我更喜欢它另一个名字 —— dynamic binding。s
那么在什么情况下，会出现 后绑定 的情况呢？
你想象一下，函数指针就是这样一种情况，不到运行时，永远不知道函数的具体是哪一个。
1 2 3 4 5 6 7 8 9 10 11 12 13 #include &amp;lt;iostream&amp;gt; int add(int x, int y) { return x + y; } int main() { int (*pFcn)(int, int) = add; std::cout &amp;lt;&amp;lt; pFcn(5, 3) &amp;lt;&amp;lt; std::endl; // add 5 + 3 return 0; } 显而易见，这相对于 early binding 是更加低效的，但是这又可以将函数作为参数传递。</description>
    </item>
    
    <item>
      <title>cpp的赋值运算符重载</title>
      <link>/post/2020/06/26/cpp%E7%9A%84%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/06/26/cpp%E7%9A%84%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</guid>
      <description>赋值运算符 的重载通常使用普通的成员函数来实现，为什么讲这个，因为我今天在写代码过程中发现一个bug，并且一开始没发现是这个问题（自赋值）。
1 C1 &amp;amp;operator=(const C1 &amp;amp;c); 我发现如果一旦当赋值操作涉及内存操作，如动态内存的开辟和释放，并且不小心使用了 A=A 这种操作时，就会引发严重的后果，例如：
1 2 3 4 5 6 7 8 9 10 11 C1 &amp;amp;C1::operator=(const C1 &amp;amp;c){ if(data) delete[] data; length = c.length; data = new char[c.length]; for(int i{0};i &amp;lt; c.length; ++i){ data[i] = c.data[i]; } return *this; } v1 = v1 // 出现这种语句会引发严重后果 所以一般都需要自检（检查即将assign的这个值）是否已经是自己，本身。
1 2 3 if (this == &amp;amp;c){ return *this; } 在赋值重载的过程中，应该要有一个这样的检查，因为a=a赋值，本身最好的情况就是整个代码逻辑没有什么变化，行为也不会发生变换；最坏的情况就是程序直接崩溃，一旦我们读取已经释放的内存，就会引发非常严重的后果。
做一个这样检查是非常快，不会消耗什么资源的。
一般一个类写出来都会有复制构造，但是有时候往往我们不需要这种复制构造（可能引发严重的后果），有的类包含一些特殊的类似于锁等，必须由开发者专门编写深拷贝函数，我们可以通过手动显式申明来禁用他。
1 C1(const C1 &amp;amp;copy) = delete; 今天要说的就是这点的东西，以前在学习过程中忽略了很多东西，但是就是这些东西，往往会让我们踩坑，这种东西又急不来，只能写点文章记录一下，过程。</description>
    </item>
    
    <item>
      <title>golang实现超lcx功能</title>
      <link>/post/2020/06/26/golang%E5%AE%9E%E7%8E%B0%E8%B6%85lcx%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/06/26/golang%E5%AE%9E%E7%8E%B0%E8%B6%85lcx%E5%8A%9F%E8%83%BD/</guid>
      <description>今年有一个端口流量转发的需求
发请求者-&amp;gt;转发器 -&amp;gt;
-&amp;gt; 业务1 -&amp;gt; 业务2 并且不仅是转发，需要他们在转发的同时就dump出一份来，否则用nginx就挺好（我知道可以给nginx写插件，但是我太菜了c基础不够好）
看了著名工具lcx之后，上手自己写一个，发现用golang的时候事情并没有那么复杂，只需要很简单的一些操作就能可以完成。
copy模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 conn, err := lis.Accept() if err != nil { log.Printf(&amp;#34;[x] accept error, detail: [%s]&amp;#34;, conn) return } conn2, err := net.Dial(&amp;#34;tcp&amp;#34;, target) if err != nil { log.Printf(&amp;#34;[x] connect to target error, detail: [%s]&amp;#34;, err) return } log.</description>
    </item>
    
    <item>
      <title>写cgo(gobinding)的一些问题和解决方法</title>
      <link>/post/2020/06/23/%E5%86%99cgogobinding%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/06/23/%E5%86%99cgogobinding%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>综述 写 cgo 不是写出来的，而是调试出来的，想要给一个c库写 gobinding 往往会遇得到你意向不大到的困难。
内存泄露 类型转换 函数调用 非标准c接口（c++问题） 这里以我的经历开始记录一下，我给公司写一个动态库 so 的 gobinding 的过程。简述一下我曲折的道路：
一开始，公司只给一个 so ，和原来用 python 写的一个 gobinding ，我发现原来的py脚本用的类似于 ffi 的方法，就是动态 load ，总之我也用这种方法，但是无论如何不是这个类找不到就是哪个函数无法调用。看完教程之后我知道大家都有源文件，难度会容易一些。
问了前辈说能给提供一个.h头文件，遂开始写了。想
开始 在 golang 中引入头文件 如果头文件不是很长的话，建议直接写在一个文件里。
1 2 3 4 5 6 7 8 9 package goskynet /* #cgo LDFLAGS: -L${SRCDIR} -lskynet_external #include ... .... .... */ import &amp;#34;C&amp;#34; 其中 import &amp;quot;C&amp;quot; 和其他的引入不能放在一个括号里，必须单独，并且必须贴紧上方注释。
将自定义的C类型 -&amp;gt; golang 目的是，在包外调用时无需再 针对C相关的包 申明任何东西，也就是无需再外部 import &amp;quot;C&amp;quot;
类型转化只要注意一个问题就好，就是类型是否经过 typedef 类型定义，如果经过了，在golang中无需指定struct</description>
    </item>
    
    <item>
      <title>c&#43;&#43; 测算函数运行时间</title>
      <link>/post/2020/06/22/c-%E6%B5%8B%E7%AE%97%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/06/22/c-%E6%B5%8B%E7%AE%97%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</guid>
      <description>如何测算函数运行时间 每次要测了，我都百度一串代码复制粘贴到我的代码中，时间长了我依然记不得，到底怎么测算的，大概是用clock_t啥之类的吧
这次我来找一个比较精准的测算方法。
chrono库 这个库比较神秘，但是我上网查阅资料之后把它封装成一个类了。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include &amp;lt;chrono&amp;gt; // for std::chrono functions class Timer { private: // Type aliases to make accessing nested type easier using clock_t = std::chrono::high_resolution_clock; using second_t = std::chrono::duration&amp;lt;double, std::ratio&amp;lt;1&amp;gt; &amp;gt;; std::chrono::time_point&amp;lt;clock_t&amp;gt; m_beg; public: Timer() : m_beg(clock_t::now()) { } void reset() { m_beg = clock_t::now(); } double elapsed() const { return std::chrono::duration_cast&amp;lt;second_t&amp;gt;(clock_t::now() - m_beg).</description>
    </item>
    
    <item>
      <title>c&#43;&#43; 中 如何向函数传入一个数组？</title>
      <link>/post/2020/06/21/c-%E4%B8%AD-%E5%A6%82%E4%BD%95%E5%90%91%E5%87%BD%E6%95%B0%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/06/21/c-%E4%B8%AD-%E5%A6%82%E4%BD%95%E5%90%91%E5%87%BD%E6%95%B0%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84/</guid>
      <description>如何向函数传入一个数组 这看起来是一个简单的问题，但是无论使用哪个方法，总是不能同时兼顾几个问题。
函数的参数在编译时，参数和临时变量等大小已经决定（栈空间大小），因此无法传入长度可能不定的一个参数。
1 2 3 void DoSth(int a[4]){ // } 即便你这样传入，你的编译器也会认为你传入的是一个int *。
1 2 int arr[5] = {0,0,0,0,0}; DoSth(arr); 编译器也不会判你为错误，用一个词叫退化(degrade),你的int a[4]会退化成为一个int *a
两者究竟有什么区别？
区别就是，没退化(degrade)之前，你可以知道它的长度，退化之后，便不得而知，通过以下case你可以检验我上面说的这句话
1 2 3 4 int array[5]{ 1, 2, 3, 4, 5}; std::cout &amp;lt;&amp;lt; sizeof(array) &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; // 20 (在我的电脑上) int *ptr{ array }; // 手动退化 std::cout &amp;lt;&amp;lt; sizeof(ptr) &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; // 8 (在我的电脑上) 为啥要说（在我的电脑上）：int在我的电脑上是4个字节，int *是8字节，也许在32位的电脑上会有所不同。
言归正传，回到问题本身，C++为何不允许在函数中直接传递数组：我大概明白你的意思，就是你想在不退化的情况下，直接传递一个数组包含的全部信息到函数中。
先说能不能做，再说为什么不推荐。
可以:
如果仅仅是不退化是可以做到的：
1 void Dosth1(int (&amp;amp;arr)[4]){} 这样就可以完成题目的愿望，或者你可以仍然认为我没有完成因为：
1 2 3 void Dosth1(int (&amp;amp;arr)[4]){ std::cout&amp;lt;&amp;lt; typeid(arr).</description>
    </item>
    
    <item>
      <title>Golang 字符串</title>
      <link>/post/2020/06/04/string-in-golang-utf-8/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/06/04/string-in-golang-utf-8/</guid>
      <description>早闻golang是utf-8存储的 可utf-8到底是什么，你知道么？过了这么久，我一直不知道什么是utf-8，今天学了一下。
go中如何存储 hello 世界? str := &amp;quot;hello 世界&amp;quot;
我们可以先使用golang打印看看，当然不是平时那么打印，我们需要用到一些fmt的格式化工具包，我们按照unicode、字符串、二进制、十六进制这样来打印看看。
1 2 3 4 u := []rune(str) for i := 0; i &amp;lt; len(u); i++ { fmt.Printf(&amp;#34;%U %s %#b %#x\n&amp;#34;, u[i], string(u[i]), u[i], u[i]) } 打印前转化成rune字符，打印之后如下
1 2 3 4 5 6 7 8 U+0068 h 0b1101000 0x68 U+0065 e 0b1100101 0x65 U+006C l 0b1101100 0x6c U+006C l 0b1101100 0x6c U+006F o 0b1101111 0x6f U+0020 0b100000 0x20 U+4E16 世 0b100111000010110 0x4e16 U+754C 界 0b111010101001100 0x754c fmt能通过反射帮助我们把东西打印成想要的样子</description>
    </item>
    
    <item>
      <title>贝壳秘籍（非技术文）</title>
      <link>/post/2020/05/24/secret-in-ustb-scce/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/05/24/secret-in-ustb-scce/</guid>
      <description>在 海淀贝壳大学，以下几个点是你必须要 注意 的。这次的推送其实是专门给 新手们 指南的，即将要来一波新生，我说的有没有道理，你先听一下看看。
如果你突然被拉进一个群里，不要说话，立马退群 这种群一般都是 XX志愿群，XXX打扫卫生群，XXXX活动群。如果你事先不知道，要被拉近一个群里，什么都不要问，直接退群，这种群会让你本就紧巴巴的大学生活，更加紧凑。
请一定要扩大交际圈 扩大交际圈，也许可以和别人相处的过程中，发现共同的爱好，或者欣赏到别人的强项。如果有同样的爱好，你们可以一起奋斗共同进步。很多我认识的大佬是乐于助人，愿意帮助其他同学的人。
大学前期一定要非常注意期中/末考试 刚到贝壳，坐在后排的你会发现，周围的人上课都打打王者，戴着耳机看直播；坐在前排的人会非常努力的记着笔记；回到宿舍推开门你会发现宿舍还有一个自己学的。不过……你和他们 不一样，你可以选择成为他们的任何中的一个。但你的选择 并不影响 你的 考试成绩，考试是和平时的学习独立存在的两个事物。考试往往和你考试前一两周的学习努力程度程正相关，和你的复习方法有关。
你会发现，即便是上课听讲的部分没有做好，只要仔细看 PPT，你的考试不会太差。
笔者曾经就在这上面吃了亏，作为一个以为自己认真学习的人，每次认真完成作业，回去宿舍还复习……考试前却因为没课在刷 绝命毒师 最后结果可想而知，险些挂科……我不管你做哪种人，听我一句劝，一定要好好抱佛脚……最好的抱佛脚方式我会另外发一篇文章总结。
如果你不好好抱佛脚，你的大学四年会过的非常不好，命运会用下方的方式和你开玩笑！
你会发现，大二的时候你们专业转进来一批人，成绩特别好，成绩不好的人是没有资格转专业的。（现在宽松了很多了）
成绩不好转专业没戏 我曾经一度非常痛苦，无圈子，无好友，尝试转专业却被打回来了。老师：“你没有学过微积分！不能转我们专业！”，”老师我⚽️⚽️你了，我学过数学分析，试卷和微积分都一样，而且我学的是数分A“。
”不行“，规定就是规定，只是最后结果公示的时候，加权都是90以上的，我瞬间明白了，不是我没学过微积分，主要是我成绩太差了。我暗自下定决心，一定要好好努力……未来超，是不可能的！
你如果没开好一个头，你的整个四年都会和任何与成绩有关的好处无缘，奖学金，保研等等。
如果你学习不好，你想换一个专业重新开始，抱歉！不允许。
你会发现某些专业人成绩好的转走一大排。成绩好的人才有选择权，也就是说，你本身就在这个专业上 成绩不好，但是因为你 成绩不好，因此你 不能 去学习其他的专业。相反些学的成绩好的，反而可以随便选择。你会发现有点阶级固化的意思了。
一定要正确，不能说不，要说是，说好 很棒，很好，好就好在我说他好。
晨跑好不好，确实好，帮助我们强壮我们的身体，让大家在第一节课的时候保持 $$精^{jin}力^{pi}充^{li}沛^{jie}$$，学长学姐们还要不畏艰难险阻，起来陪后辈们一起 早起打卡，多么伟大，他们 真的辛苦了。我不知道制定这个规则的老前辈们是对我们有多高的期望，我们一定不负众望，早起跑步。
记住一定要锻炼好身体，这是铁律。（每年 ACM 队的同学都要统一组织跑步和踢球）
大家说好的时候，一定要说好，即便你不理解，心里有其他想法，跟着做就行了。
比如最近回信巴基斯坦学生，全校沸腾，我差点以为我读的是巴基斯坦科技大学海淀分校，贼好，值得全校都开会学习了精神，你看：
全北京乃至全国的机构都来学习本次回信精神了，你怎么也得意思意思，一起学习这封信的精神吧！
我校和巴铁的友好关系长存，我们实验室周围也有巴基斯坦学生，本文无意冒犯巴铁们。
以后我就爱称我科为 “巴科大”。
如果你遇到可厚可薄的作业，一定往厚了写，否则你会吃亏 大一的时候，写了个银行系统？面向对象编程，代码几百行，文档两三页，结果自然可想而知，这位同学程序写的不错，但是文档太不认真了。
大二的时候，有个哈利波特作业，用算法读小说，找某个字符串重复次数。本人不才，写了个KMP算法，一秒读完，虽然不是最牛逼的。但是我没意识到，其实老师根本不会运行你的程序，也不会仔细看你的报告。他只看看你的厚度，最后80分来着吧。
上面两个例子告诉你，对待报告一定要 “认真” ，不管你是会还是不会，想写还是不想写，字数一定要凑足，图一定要好看。
关于这个点，我会专门写一个帖子教大家怎么混个高分报告。好了已经立了3个flag了。
19年我物理实验改成线上实验，前三周的物理实验突然不见了，我怀疑为某校同学恶意删库。经过恢复了系统之后，第三周的实验报告没了，老师让我们重做，可想而知，我这种 “贱骨头”，肯定是吃亏的，最后零分，老师59分卡我，物理实验不能补考。
千万不要无条件的帮助别人 别人同时指老师|同学。
“这次会议你做个PPT吧”“好的。”
“这次我们想做一个XX，你那里有空吗？”“可以。”
“这里有一个新的研究项目，是做XX的，你想来参加吗？”“好的”
当你答应之后，你会发现你的事越来越多，周三周五要开会，当然你可以选择你的生活。但是请注意不要无条件帮助，我说的条件包含：金钱，工时，知识……
“你这么小气干嘛，这次视频让你来剪吧。”，你花了几个小时找资料，剪辑，最后你看到视频在某个楼道里播放，你收获了什么？剪辑水平或许没有提高几个小时电脑渲染的损耗CPU99%因为剪辑视频没吃晚饭肚子痛。因为剪辑视频需要额外的时间去学习。
我愿意奉献，可是回头来你会发现，只要你成为“能者”，未来你一定会多劳，因为你愿意奉献，别人也愿意白嫖。笔者曾经在几个科技展上充当炮灰，13：00赶到万秀已经没了饭菜。去给没人愿意参加的讲座凑数穿的西装笔挺去帮别人领奖。
经历了无数的白嫖的我，最后变得尤其现实，任何人请我做任何东西，如果是顺便我能帮尽量帮，如果是要花费我不少精力时间，我一般会先问一下，我能获得什么。你也许会觉得我这个人，太自私，我接受你的批评。
后话 有些东西，只有经历了才会明白，我现在告诉你，你可能也不会这么做，你就是会试错，所以这篇文章其实是我自己祭奠我死去的大一大二使用的。
文章可能会给你带来负能量。每天高喊正能量，我很棒的方式只会麻痹自己，有时候你需要一些相反的鸡汤来让你认清自己，认清环境。</description>
    </item>
    
    <item>
      <title>编译器 VS 解释器</title>
      <link>/post/2020/05/07/compiler-vs-interpreter/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/05/07/compiler-vs-interpreter/</guid>
      <description>今天看了一篇关于解释器和编译器的区别的文章，自己也谈谈自己的理解。
编译器 编译器是一个程序（可以使用其他语言来实现），可以读取 源代码（source code） 并且产生 可执行文件，之后仅需要运行可执行文件即可，无需在每次执行的时候编译（有一些程序编译器来是相当耗时的，笔者因为一些特殊原因编译了一次 g++，竟然花费了长达2小时）。以下图一就是编译器的运行过程。
流行使用编译器之前，编译器非常慢，并且从来不对产生的代码进行优化，许多年过后，编译器已经能非常快速的的优化并且生成二进制可执行文件，总之比人写汇编快一些。
解释器 解释器是一个直接从源代码中执行指令的程序，常见的解释语言有(Python，PHP)，解释型语言往往有更加灵活的语法相对于编译型语言，但是他们通常更加低效，因为每次执行的时候都需要解释。
编译器VS解释器 你可以幻想如果一方有压倒性的优势，另一方就没有存在的意义了，所以两者既然都存在，那么肯定有原因，
https://stackoverflow.com/questions/38491212/difference-between-compiled-and-interpreted-languages/38491646#38491646
翻译来自以上问答。
大体上讲，编译型语言或者编译器具有以下 优点：
因为编译器可以在执行前浏览一遍代码，他们可以在生成最终可执行文件的之前，执行一些分析和优化，使得编译的可执行文件相比于逐行解释、执行来的更加快速。
编译器可以生成与原来的高级语言表现相同的低级[^1]的code，……看不懂,大概意思就是可以减少内存的开销（我的垃圾英语）。
Compilers can often generate low-level code that performs the equivalent of a high-level ideas like &amp;ldquo;dynamic dispatch&amp;rdquo; or &amp;ldquo;inheritance&amp;rdquo; in terms of memory lookups inside of tables. This means that the resulting programs need to remember less information about the original code, lowering the memory usage of the generated program.
编译产生的程序，运行起来比解释代码快，因为指令本身就是的目的，而不是像解析型语言一样，除了执行程序本身之外还要运行一个解释器。</description>
    </item>
    
    <item>
      <title>golang下map的性能分析</title>
      <link>/post/2020/01/12/golang-map/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/01/12/golang-map/</guid>
      <description>golang 中 map 性能优化[低阶] 简单介绍 golang 中的 build-in 的 map 这个 map 是非线程安全的，但是也是最常用的一个家伙。 为了测试多个 map 的性能我写了个接口 Map
1 2 3 4 5 type Map interface { Set(key string, val interface{}) Get(key string) (interface{}, bool) Del(key string) } 然后这是封装的普通的 map
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 type OriginMap struct { m map[string]interface{} } func NewOriginMap() *OriginMap { return &amp;amp;OriginMap{m: make(map[string]interface{})} } func (o *OriginMap) Get(key string) (interface{}, bool) { v, ok := o.</description>
    </item>
    
    <item>
      <title>Radare 的使用</title>
      <link>/post/2019/12/11/use-of-radare/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/12/11/use-of-radare/</guid>
      <description>选择产品：Radare2取证工具
工具介绍 Radare是一个取证工具以及可编写脚本的命令行十六进制编辑器，可以打开磁盘文件、支持分析二进制、反汇编代码、调试程序以及连接到远程gdb服务服务器的功能，我看到这个工具以前曾进过Github TOP 30，但是由于各种原因，我们平时都使用GDB，也就忽略了这个工具，看到它被定义为取证工具的时候我有点好奇，什么是计算机取证&amp;hellip;&amp;hellip;..下面贴一下man手册中r2的描述
1 2 3 4 5 6 RADARE2(1) BSD General Commands Manual RADARE2(1) NAME radare2 -- Advanced commandline hexadecimal editor, disassembler and debugger 功能测试 众所周知GDB可以运行时（runtime）分析，但是R2只是一个静态分析的软件，让我来看看他有多强大，先分析一小段代码看看。
这个软件集成了许多小工具，看来平时写python小工具的时代结束了，这么多附带的小工具我来介绍下。
rax2 &amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; 用于数值转换 1 2 $rax2 -s 414141 AAAA% 看下man手册介绍
1 2 3 4 5 6 7 8 9 RAX2(1) BSD General Commands Manual RAX2(1) NAME rax2 -- radare base converter DESCRIPTION This command is part of the radare project. This command allows you to convert values between positive and negative integer, float, octal, binary and hexadecimal values.</description>
    </item>
    
    <item>
      <title>基于Websocket的消息传输系统</title>
      <link>/post/2019/12/03/websocket/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/12/03/websocket/</guid>
      <description>更新于 2020-12-31
鄙人就是普通本科生，编码水平谦虚，大多数代码源自其他项目，比如一个叫leaf的游戏框架。
leafgithub.com
但是作为普通的穷苦人民，在上面催你的时候，很难静下新来，慢慢的打开vscode去一行一行的看，比如你现在可能就是在火急火燎的想在知乎上寻求一个解决方案。
先说一下我的使用场景。我的场景是这样：
用户会登陆软件后，需要一些认证方法，连接上socket，然后会进行高速传输，比如消息、群消息、交易拍卖、其他等等一系列消息，主体就是用户，客体是其他用户或者服务器。
架构 我现对整个项目架构描述一下
先简述一下Hub的设计，总的一个Hub包含Client这样一个map用来储存连接信息，然后每个连接有一个Reader和一个Write来从客户端读取和写入客户端。
按照图中标志，按实际执行顺序来讲
①. 客户端向服务端发起Socket连接，（服务器识别到这是Socket连接之后有个Upgrade操作），这里不太明白的可以去看看Socket连接的过程，并不复杂。
③. Reader收到的第一条消息，是注册消息，一般又客户端OnConnect的时候发送，一般会携带认证信息进行身份认证。
②. 认证成功之后服务器应该返回用户类似于JWT或者SessionCookie类的东西，或者没有也没关系，因为每次重新创建连接都要认证，我用JWT是为了做访问控制。
如果没有其他异常：就会一直处在①、②、①、②&amp;hellip;&amp;hellip;这样的收发状态。直到&amp;hellip;&amp;hellip;.
④. 注销，一旦客户端退出或者网络中断等异常，就会出现断开。
好了讲了整个东西架构，让我们来看看怎么实现的把，showcode时间到了。
实现 首先，让我们来看看hub的结构吧，说结构还真的就是结构
1 2 3 4 5 6 7 8 // 整个项目的交流系统，由clients和各种不同的chan组成， type Hub struct { Clients map[*Client]bool // 储存保持连接的用户 UserToClient map[string]*Client // 获得用户和其连接的对应关系 Message chan []byte // 广播消息队列 Register chan *Client // 发起注册请求的队列 Unregister chan *Client // 断开连接的队列 } 注释讲的比较清楚了，我中间使用UserToClient这个map来方便找到我们的Client而已，
注意，Client我们存的是指针，因此在这里并没有太多冗余，我只是为了方便找用户，而且不用再遍历。
这里大家有没有注意到一个好玩的东西叫做chan ，这个东西在C/C++里叫做pipe，但是我个人觉得在go里爽的不止那么一点点，有这个东西，我的思路清晰多了。
Golang 给我们提供了一个类似于管道的东西，目的是进行协程间通信。我们先假装自己不知道goroutine这个东西，我们就可以认为 go produce(ch) 就相当于手动执行了一个程序，传入了我们事先 make 的一个长度（缓冲长度）为 5 的chan ch := make(chan int, 5) 这个管道有点像。</description>
    </item>
    
    <item>
      <title>OUC流量分析课-记一次中国海洋大学安全课程</title>
      <link>/post/2019/09/19/web-security-class-in-ouc/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/09/19/web-security-class-in-ouc/</guid>
      <description>最后修改与2020-12-31
说来惭愧，本人虽然是一个信息安全专业的人，而且目前已经是大学第三个年头了，可是我对安全方面的知识掌控能力基本为 0，因此完全可以当做一个小白来看待，本节课内容简单，记录为博客纯属凑数。
第一题 课程首先教了使用 wireshark 抓取 ping 产生的 ICMP request 和 reply 的包，目的应该是教会大家使用wireshark 的过滤条件
ICMP简介 什么是ICMP： ping 是基于ICMP工作的，全称 Internet Control Message Protocol，就是互联网控制报文协议。网络包在异常复杂的网络环境中传输时，常常会遇到各种各样的问题。当遇到问题的时候，要传出消息来，报告情况，这样才可以调整传输策略。
ICMP 请求包
ICMP 返回包 看到了ping自己手机产生的ICMP包
第二题 (a) 分析题目提供的流量，解析获得FLAG
关键就是要一个一个找. (b) 很快发现是flag是一张PNG
将PNG包导出获得FLAG
(c) 破解WPA加密的WIFI密码 使用命令配合github上的字典，快速破解得到密码
$ aircrack-ng wifi.pcap -w ~/Desktop/my/Black/字典/fuzzDicts/passwordDict/top500.txt
$ airdecap-ng -e Blue-Whale -p 12345678 wifi.pcap 指定密码将包解码
最后在读包过程中，找到FLAG
愉快的课程就结束了，还是蓝鲸的研究生小姐姐带着做题的，很开心。</description>
    </item>
    
    <item>
      <title>使用modelsim_ase &#43; flask实现了一个测评沙箱</title>
      <link>/post/2019/09/02/modelsim-ase-flask/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/09/02/modelsim-ase-flask/</guid>
      <description>二话不说先甩上Github连接 Verilog-Judge-USTB
Verilog-Judge-USTB 来自北京科技大学某小组的一个verilog的评测沙箱，基于Flask编写
A verilog online judger from USTB, based on Flask-python
Usage 构建(build)
1 2 3 git clone https://github.com/dashjay/Verilog-Judge-USTB.git cd Verilog-Judge-USTB docker build . -t verilog-judge 运行(run)
1 docker run verilog-judge -v ./modelsim_ase:/root/modelsim_ase -p 33778:5000 内部指定的modelsim_ase来自FPGA微软的免费软件 Quartus Lite 中的modelsim组件 docker内部运行的端口是5000，开在外部
测试(test)
1 2 chmod +x test.sh python test.py | python -m json.tool 以下是测试输出
1 2 3 4 5 6 { &amp;#34;cmpcode&amp;#34;: 1, &amp;#34;cmpresult&amp;#34;: &amp;#34;Start time: 07:46:33 on Sep 02,2019\nvlog top_module.</description>
    </item>
    
    <item>
      <title>使用 Modelsim 中的 CommandTools 进行仿真</title>
      <link>/post/2019/07/27/modelsim-commandtools/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/27/modelsim-commandtools/</guid>
      <description>本文最后修改于 2020-12-31
本人在本科期间有学一门课程叫做数字逻辑，这是一门从与或门开始，一直到加法器等普通电子器件，最终实现一个 CPU 的课程。课程内使用的是一个叫 Vivado 的电路设计，仿真综合软件。我私下一直使用的是iverilog进行的仿真，生成vvp可执行文件之后运行得到结果，因为方便。
我一般会写这样的Makefile
1 2 3 4 5 6 7 8 9 10 11 12 all: cmp vvp lxt cmp: iverilog *.v -o tb_top.vvp vvp: vvp tb_top.vvp lxt: cat top.lxt clean: @rm -rf tb_top.vvp tb_top.lxt 有了以上 Makefile ，将 *.v文件和 Makefile 放在一起，执行 make 命令即可完成相应操作
但是用这种方式，生成的波形只能使用GTKwave来查看，并且当有一些复杂的情况出现时候，iverilog就无法处理了，所以我们使用Intel提供的免费的Modelsim来完成仿真，仿真资料比较少，全是图形化界面的介绍，道路坎坷。
0x0：下载全套工具 我在 intel 官网下载了 lite 版本，最小套装，大同小异，包大小 100 多 M，这里就不留源文件了。 我下载的是：Quartus-lite-18.1.0.625-linux.tar
0x1：安装 解压之后有一键安装脚本，运行的时候会提示缺库，安装对应的库文件就可以使用了。
0x2：仿真出波形 0x21. vlog工具 路径位于 intelFPGA_lite/18.1/modelsim_ase/bin/vlog 执行 *vlog .v 即可对当前目录所有 .</description>
    </item>
    
    <item>
      <title>Daily</title>
      <link>/daily/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/</guid>
      <description>看了几位大佬都有记日记的习惯，其实我也有，从18年Kesa带我写代码的时候，就开始使用博客记日记了。然后经历了，折腾狂的过程。我发现被鹏哥说中了，我有时候会自嗨1。
2020-08-17 恍恍惚惚又过了一个月，在这一个月里我做了以下的事情 用cpp重构了sap 用cpp写了一个httpServer的demo 在护网中搞了一波蜜罐 为啥不写日记呢？一开始感觉blog不能更新太频繁，就想用日记来替代，但是后来发现，学习和工作的时候都会忘了这茬，只有摸鱼的时候才会想起，以后这里统一改名摸鱼日记吧。 2020-07-11 今天整个重构了内部项目SAP，竟然封装了 http.Request 这个包，全部重构了，心情舒适，终于改成中间件模式。 学完了cpp的模板了，模板特化真的太舒服了，我认为这种模板可以减少（运行时类型检测RTTI），节省很多性能。 2020-07-06 不知不觉就过了一天，今天把 hybrid 模式迁移到 sap 了，但是还是无法解决端口复用问题，这确实是一个很棘手的问题。 手写的subfilter比较稳定的，不知道性能可否优化。 2020-07-05 解构函数必须申明为虚函数，大一的时候，大学CPP老师就只告诉我这个，我今天终于看了一遍虚函数是啥意思。理解起来，有点像定义接口，如果是纯虚函数那就是真的定义接口。 今天尝试完成一个需求，就是HTTP层和TCP层的数据要同时处理，当工作在TCP层的时候，解析HTTP变得很复杂，当工作在HTTP层的时候，一旦涉足TCP就可能破坏整个会话。很显然，没有什么舒服的方案，非常凄惨，8月份我的工作内容都是这个。 2020-07-04 新目标创建【了解 HTTP、TCP 等网络相关协议】，以前都是各种尝试，哪里不对从来不去学习，总是玄学debug，这次有空了真的要弄本书来看看，学学http并且会使用c++实现一个http的基础库。 继续写superlcx的文档，和更多的中间件，并且给每个中间件集成单元测试。【了解测试的重要性，熟悉测试驱动开发】，终于认识到了测试的重要性。 XRM那边的游戏可能还会用上我，需要为游戏构建一个高性能的实时系统。 算法的话，不能摸鱼啊，偶尔看一题也不好使，上一题看的跳表，都是很久远以前了。 2020-07-03 已经两个月没写东西了，主要原因还是自己懒惰，下面说一些这一个月干的事情吧。 在公司里完成了SAP主逻辑的编写，也就是我的开源项目SuperLcx，这可能会是我比较重要的项目之一。 CPP从 S 看到了 10 章，也就是看到了类型聚合等，11 章是介绍集成后面都是一些多态，模板编程等相关的一部一部来吧。 整理了一遍博客，换一个主题，也打算重新拾起golang方向（之前学习cpp是为了逃避golang）。 2020-05-23 今天收到老师的通知要做一个winForm程序，还要再windowsXP上运行，比较尴尬，装一波vs2013 这几天看CPP已经看得到第S章了，还创建了一个Repo打算翻译CPP 2020-05-13 今天已经读C++到第五章了 昨天今天写了很多有关sap的代码，并且已经放到主repo中了，只是没有分支出来。 2020-05-08 今天读了CPP教程第一章https://www.learncpp.com/cpp-tutorial/introduction-to-expressions/,学到了很多细节的内容 今天上班感觉累死了，主要是找不到bug，过程太无聊了。 2020-05-06 我发现墨菲定律是真的，越是怕，越是小心的事情就越容易发生在你的身上。 今天处理了一堆没学到东西的玩意儿，感觉心里怪难受的 也就是说今天我什么都没学到，没有进步的一天，好恐怖啊 2020-05-05 今天给重构之后的项目写了个文档，写文档真的是令人痛苦，怕太枯燥又怕写不清楚。 文档的撰写到底要占用一个项目多少时间啊，感觉每次都很难搞。 2020-05-03 几天没写了，劳动节反而变懒惰了 这几天重构了项目，Simple才是王道，原来的项目说实话过于复杂了。 准备写一些文档关于现在的项目。 2020-04-29 昨天又没写，也没看书，一天都在搬砖 SAP今天完成了，真的是一个还算巨大的工程，觉得自己挺厉害的。 看了一篇文章关于同站跨站安全的https://mp.weixin.qq.com/s/YqSxIvbgq1DkAlUL5rBtqA 2020-04-27 今天看了一下RabbitMQ的原理和用法。 今天又搬了一些砖，但是了解了产品，挺好的 今天7788写了一些代码，给谈课，和SAP 2020-04-26 完成了一些非主线的工作，嗨，就是搬砖。 读完了《UNIX编程艺术》的第五章，感觉，没有什么感觉，这方便涉足太少，前置知识太多，不过POP3，SMTP这些工作了几十年还没过时的东西，是真的聪明。 23点半了，现在我想完成一下我的SAPrespose的读取。就是现在。 2020-04-25 不知道为什么，不小心就忘了写两天，十分对不起。 今天花了小半天时间，起了一个docker registry用来存放谈课项目的docker，自动构建的。 然后今天重写了项目的CI，让CI帮忙把构建好的docker push到私有registry了，真的挺爽的。以后只需要commit就会自动提交构建了。 2020-04-22 昨天没写因为被各种事情忙到了，大概是北科校庆，公司代码出bug，昨天课多作业多。 没有完成一个stage（可运行）之前，先不要优化，你会后悔的。 简单，一定要简单，不要写奇怪的东西，奇怪的东西（接口）会让你的程序不易维护和链接。 2020-04-20 公司要求把库都换成基础库，基础库不在内网必须配置ZeroTier才能访问，主机配置了ZeroTier确实能访问，但是docker build的时候就不好使了，心如刀绞。有两个个办法。 本地起一个goproxy，让docker挂主机的代理 滚回去公司内网里上班😊 今天买了RabbitMQ的书，在此立一个flag，这本书到手20天必须看完，只要写的还不错的话，不要像[Go语言的并发之道]不如特么谷歌翻译，Oreilly怎么会请这些奇怪的人来翻译呢？？？？？？</description>
    </item>
    
    <item>
      <title>Intro</title>
      <link>/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/</guid>
      <description>项目经历 2018年5月(开始写代码) 从 Unity3D 切入我的代码生涯，做了有关人体 3D 展示和工业展示使用的项目，成功交付。
2018年11月(开始使用PHP) 使用 Laravel，ThinkPHP等框架，搭配一些脚本 (python,bash) 等开始编写一个OJ，自行使用了 Verilog 编译器 ModelSIM 和 Iverilog完成了 Verilog 语言的代码测评，于2019年7月完成项目。项目并没有上线，而是被商业项目替代。
2019年8月(开始使用golang) 上手的目的是为了开发一个高性能的 LBS 游戏，结果一发不可收拾。在简单学习过语言的基础使用后，进一步了解了 Goruntine 和 chan 等操作，熟悉了常见的并发代码习惯之后，开始编写服务类程序。
多线程爬虫 论坛和类论坛程序 2020年5月至今 顺利的学习了 CPP ，LUA，JavaScript，并惊叹于 LUA 这种栈式操作的神奇之处（高性能），使用golang编写了开源项目SuperLcx，然后也编写了一些 IO 性能较好的工具。
过去 1998年出生后直到18年5月才接触代码，当时Kesa教我写代码，我沉迷其中，成绩一落千丈，但是还是没办法&amp;hellip;&amp;hellip;成绩比较差，出国的打算也没了，但是我的一堆朋友们(Vincente,HW,XRM,DYF,KESA)等等都帮我很多，然后我成功去海洋大学交换了一个学期，整理了一下心态&amp;hellip;&amp;hellip;开始新的一年了2020
Dashjay&amp;rsquo;s My name is Dashjay, these are what I like.
Run Drink IceCola (drug like treatment) Working Participate in a Unity3D project which display steelmaking to people. After that I made a Project demonstrat 中医(Traditional Chinese Medical) acupoint on body.</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>/cv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cv/</guid>
      <description>个人信息 姓名:赵文杰 年龄:21 邮箱:dashjay@aliyun.com 求职意向:服务端开发 教育经历 2017年9月-至今 北京科技大学 计算机类 大三在读
技术栈 熟悉使用 Golang 开发，常用 Golang + MongoDB 开发常规业务。有一定高性能服务(LBS 游 戏)开发经历，熟悉使用 goroutine ，chan 提高并发能力，会使用单元测试，性能测试等提高系统QPS。有良好的代码习惯，开发过程注重代码安全性。 日常使用 MacOS/Linux 进行开发，测试。了解使用 python/bash 编写脚本以实现自动化测试。 熟悉 PHP-Laravel +MySQL架构，能快速开发、部署、优化服务，了解常规 MySQL 命令操作。 熟悉 Dockerfile，docker-compose，曾经 Docker 化已有的复杂服务，使用 docker-compose 进 行服务编排，实现交付时一键安装，目前正在学习云原生k8s相关的内容。 有一定项目经历。 项目经历 2018年5月 使用 Unity3D 开发实时工业模拟、人体 3D 学位模拟。多个 3D 项目可以协助教师，学 生等非专业人员快速了解工业流程，方便教学和演示。
2018年10月-2019年10月 开发一个校内 OJ 平台，改善教学环境。项目使用 MySQL，PHP， Bash，Python开发并且实现Docker 化。项目部署了开源的 Python，C++代码测评沙箱，并且结 合使用Modelsim，Iverilog等开源工具实现了 Verilog 的代码评测。多语言评测功能和平台本身的 行政功能结合实现多种代码的测评，基本能够完成教学任务，给学生和教师减负。
2019年6-9月的国家级获奖
中华&amp;quot;软件杯&amp;quot;国赛一等奖、计算机设计大赛国赛二等奖、信息安全竞赛国家三等奖 2020年1月开发项目&amp;quot;⻉壳福音&amp;quot;，编写多线程爬虫，爬取学生成绩并且与旧成绩做比较，通知用户 成绩变化。项目稳定运行数月，但最终因为政策原因无法公开使用。在校内曾开发多款学生应用， 表白墙，刷题小程序等，后端用 golang + MongoDB 统一实现，从开发到部署上线，冷启动，走完整个项目流程。</description>
    </item>
    
  </channel>
</rss>
